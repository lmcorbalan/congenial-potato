{"version":3,"sources":["../src/worker/worker.ts"],"names":["Worker","initialized","networkId","logger","constructor","options","run","initialize","rootLogger","info","interval","checkUpdates","doWork","bind","name","version","providerUrl","networkType","Promise","all","web3","eth","net","getId","getNetworkType","account","address","child","accountAddress","setup","sendTransaction","tx","signedTransaction","signTransaction","resolve","reject","sendSignedTransaction","rawTransaction","once","_","receipt","error","checker","runImmediately","checkInterval","checkForUpdates","setTimeout","e","message"],"mappings":";;;;;;;AAAA;;AAIA;;AACA;;AACA;;;;;;AAQO,MAAeA,MAAf,CAAsB;AAI3B,MAAIC,WAAJ,GAAkB;AAChB,WAAO,KAAKC,SAAL,IAAkB,KAAKC,MAA9B;AACD;;AAESC,EAAAA,WAAV,CAA+BC,OAA/B,EAAuD;AAAA,SAAxBA,OAAwB,GAAxBA,OAAwB;;AAAA;;AAAA;AAAE;;AAEzD,QAAMC,GAAN,GAAY;AACV,UAAM,KAAKC,UAAL,EAAN,CADU,CAGV;;AACAC,oBAAWC,IAAX,CAAiB,iCAAgC,KAAKJ,OAAL,CAAaK,QAAS,EAAvE;;AAEA,WAAOC,YAAY,CAAC,KAAKC,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAD,EAAyB,KAAKR,OAAL,CAAaK,QAAtC,CAAnB;AACD;;AAED,QAAgBH,UAAhB,GAA6B;AAC3B,QAAI,CAAC,KAAKN,WAAV,EAAuB;AACrB,YAAM;AAAEa,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAoB,KAAKV,OAA/B;;AAEAG,sBAAWC,IAAX,CAAiB,GAAEK,IAAK,cAAaC,OAAQ,EAA7C,EAHqB,CAKrB;;;AACAP,sBAAWC,IAAX,CAAiB,sBAAqBO,gBAAY,EAAlD,EANqB,CAQrB;;;AACA,YAAM,CAACd,SAAD,EAAYe,WAAZ,IAA2B,MAAMC,OAAO,CAACC,GAAR,CAAY,CACjDC,UAAKC,GAAL,CAASC,GAAT,CAAaC,KAAb,EADiD,EAEhDH,SAAD,CAAcC,GAAd,CAAkBC,GAAlB,CAAsBE,cAAtB,EAFiD,CAAZ,CAAvC;;AAKAhB,sBAAWC,IAAX,CAAiB,oBAAmBQ,WAAY,QAAOf,SAAU,GAAjE;;AAEA,WAAKA,SAAL,GAAiBA,SAAjB,CAhBqB,CAkBrB;;AACAM,sBAAWC,IAAX,CAAiB,oBAAmB,MAAM,+BAAegB,aAAQC,OAAvB,CAAgC,EAA1E;;AAEA,WAAKvB,MAAL,GAAcK,gBAAWmB,KAAX,CAAiB;AAAEzB,QAAAA,SAAF;AAAa0B,QAAAA,cAAc,EAAEH,aAAQC;AAArC,OAAjB,CAAd;AAEA,YAAM,KAAKG,KAAL,EAAN;AACD;AACF;;AAMD,QAAgBC,eAAhB,CAAgCC,EAAhC,EAAoC;AAClC,UAAMC,iBAAiB,GAAG,MAAMP,aAAQQ,eAAR,CAAwBF,EAAxB,CAAhC;AAEA,WAAO,IAAIb,OAAJ,CAAgC,CAACgB,OAAD,EAAUC,MAAV,KAAqB;AAC1Df,gBAAKC,GAAL,CACGe,qBADH,CACyBJ,iBAAiB,CAACK,cAD3C,EAEGC,IAFH,CAEQ,cAFR,EAEwB,CAACC,CAAD,EAAIC,OAAJ,KAAgBN,OAAO,CAACM,OAAD,CAF/C,EAGGF,IAHH,CAGQ,OAHR,EAGiBG,KAAK,IAAIN,MAAM,CAACM,KAAD,CAHhC;AAID,KALM,CAAP;AAMD;;AA5D0B;;;;AA+D7B,eAAe9B,YAAf,CACE+B,OADF,EAEEhC,QAFF,EAGEiC,cAAc,GAAG,IAHnB,EAIE;AACA,QAAMC,aAAa,GAAG,iBAAGlC,QAAQ,GAAG,EAAd,CAAtB;;AAEA,MAAIiC,cAAJ,EAAoB;AAClB,UAAME,eAAe,EAArB;AACD,GAFD,MAEO;AACLC,IAAAA,UAAU,CAACD,eAAD,EAAkBD,aAAlB,CAAV;AACD;;AAED,iBAAeC,eAAf,GAAiC;AAC/B,QAAI;AACF,YAAMH,OAAO,EAAb;AACD,KAFD,CAEE,OAAOK,CAAP,EAAU;AACVvC,sBAAWiC,KAAX,CAAiBM,CAAC,CAACC,OAAnB;AACD;;AAEDF,IAAAA,UAAU,CAACD,eAAD,EAAkBD,aAAlB,CAAV;AACD;AACF","sourcesContent":["import ms from 'ms'\nimport { Logger } from 'pino'\nimport { TransactionReceipt } from 'web3-core'\n\nimport { getAddressLink } from './etherscan'\nimport rootLogger from './logger'\nimport { account, providerUrl, web3 } from './web3'\n\ninterface WorkerOptions {\n  name: string\n  version: string\n  interval?: number | string\n}\n\nexport abstract class Worker {\n  protected networkId: number\n  protected logger: Logger\n\n  get initialized() {\n    return this.networkId && this.logger\n  }\n\n  protected constructor(readonly options: WorkerOptions) {}\n\n  async run() {\n    await this.initialize()\n\n    // Show worker interval\n    rootLogger.info(`Worker will be executed every ${this.options.interval}`)\n\n    return checkUpdates(this.doWork.bind(this), this.options.interval)\n  }\n\n  protected async initialize() {\n    if (!this.initialized) {\n      const { name, version } = this.options\n\n      rootLogger.info(`${name} - Version ${version}`)\n\n      // Show Web3 provider info\n      rootLogger.info(`Web3 provider URL: ${providerUrl}`)\n\n      // Show current network info\n      const [networkId, networkType] = await Promise.all([\n        web3.eth.net.getId(),\n        (web3 as any).eth.net.getNetworkType()\n      ])\n\n      rootLogger.info(`Current network: ${networkType} (id=${networkId})`)\n\n      this.networkId = networkId\n\n      // Show account info\n      rootLogger.info(`Current account: ${await getAddressLink(account.address)}`)\n\n      this.logger = rootLogger.child({ networkId, accountAddress: account.address })\n\n      await this.setup()\n    }\n  }\n\n  protected abstract async setup()\n\n  protected abstract async doWork()\n\n  protected async sendTransaction(tx) {\n    const signedTransaction = await account.signTransaction(tx)\n\n    return new Promise<TransactionReceipt>((resolve, reject) => {\n      web3.eth\n        .sendSignedTransaction(signedTransaction.rawTransaction)\n        .once('confirmation', (_, receipt) => resolve(receipt))\n        .once('error', error => reject(error))\n    })\n  }\n}\n\nasync function checkUpdates(\n  checker: () => Promise<void>,\n  interval: number | string,\n  runImmediately = true\n) {\n  const checkInterval = ms(interval + '')\n\n  if (runImmediately) {\n    await checkForUpdates()\n  } else {\n    setTimeout(checkForUpdates, checkInterval)\n  }\n\n  async function checkForUpdates() {\n    try {\n      await checker()\n    } catch (e) {\n      rootLogger.error(e.message)\n    }\n\n    setTimeout(checkForUpdates, checkInterval)\n  }\n}\n"],"file":"worker.js"}