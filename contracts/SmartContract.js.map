{"version":3,"sources":["../src/contracts/SmartContract.ts"],"names":["SmartContract","configure","contractName","abi","networks","artifacts","web3","networkId","networkType","Promise","all","eth","net","getId","getNetworkType","Error","address","transactionHash","initialBlock","tx","getTransaction","blockNumber","jsonInterface","constructor","options","Object","assign","contract","Contract"],"mappings":";;;;;;;;;;;;;AAuBO,MAAeA,aAAf,CAA6B;AAClC,SAAiBC,SAAjB,CAA2B;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,GAAhB;AAAqBC,IAAAA,QAAQ,EAAEC;AAA/B,GAA3B,EAAyF;AACvF,WAAO,MAAOC,IAAP,IAAgD;AACrD;AACA,YAAM,CAACC,SAAD,EAAYC,WAAZ,IAA2B,MAAMC,OAAO,CAACC,GAAR,CAAY,CACjDJ,IAAI,CAACK,GAAL,CAASC,GAAT,CAAaC,KAAb,EADiD,EAEjDP,IAAI,CAACK,GAAL,CAASC,GAAT,CAAaE,cAAb,EAFiD,CAAZ,CAAvC;;AAKA,UAAI,CAACT,SAAD,IAAc,CAACA,SAAS,CAAE,GAAEE,SAAU,EAAd,CAA5B,EAA8C;AAC5C,cAAMQ,KAAK,CAAE,GAAEb,YAAa,8BAA6BM,WAAY,SAAQD,SAAU,GAA5E,CAAX;AACD;;AAED,YAAM;AAAES,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAA+BZ,SAAS,CAAE,GAAEE,SAAU,EAAd,CAA9C,CAXqD,CAarD;;AACA,UAAIW,YAAY,GAAG,CAAnB;;AAEA,UAAID,eAAJ,EAAqB;AACnB,cAAME,EAAE,GAAG,MAAMb,IAAI,CAACK,GAAL,CAASS,cAAT,CAAwBH,eAAxB,CAAjB;AAEAC,QAAAA,YAAY,GAAGC,EAAE,CAACE,WAAlB;AACD;;AAED,aAAO;AACLL,QAAAA,OADK;AAELE,QAAAA,YAFK;AAGLI,QAAAA,aAAa,EAAEnB,GAHV;AAILK,QAAAA,WAJK;AAKLF,QAAAA;AALK,OAAP;AAOD,KA7BD;AA8BD,GAhCiC,CAkClC;;;AAeUiB,EAAAA,WAAV,OAA4E;AAAA,QAAtD;AAAEjB,MAAAA,IAAF;AAAQgB,MAAAA;AAAR,KAAsD;AAAA,QAA5BE,OAA4B;;AAAA;;AAAA;;AAAA,0CAR5C,CAQ4C;;AAAA;;AAAA;;AAC1EC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,OAApB;AACA,SAAKG,QAAL,GAAgB,IAAIrB,IAAI,CAACK,GAAL,CAASiB,QAAb,CAAsBN,aAAtB,EAAqCE,OAAO,CAACR,OAA7C,CAAhB;AACA,SAAKV,IAAL,GAAYA,IAAZ;AACD;;AArDiC;;;eAwDrBN,a","sourcesContent":["import Web3 from 'web3'\n\nexport interface ContractArtifact {\n  contractName: string;\n  abi: any[];\n  networks: {\n    [networkId: string]: {\n      address: string;\n      transactionHash: string;\n      // ...\n    };\n  };\n  // ...\n}\n\ninterface ContractOptions {\n  address: string\n  initialBlock: number\n  jsonInterface: any[]\n  networkType: string\n  web3: Web3\n}\n\nexport abstract class SmartContract {\n  protected static configure({ contractName, abi, networks: artifacts }: ContractArtifact) {\n    return async (web3: Web3): Promise<ContractOptions> => {\n      // Obtain current network ID\n      const [networkId, networkType] = await Promise.all([\n        web3.eth.net.getId(),\n        web3.eth.net.getNetworkType()\n      ])\n\n      if (!artifacts || !artifacts[`${networkId}`]) {\n        throw Error(`${contractName} contract not available in ${networkType} (id:=${networkId})`)\n      }\n\n      const { address, transactionHash } = artifacts[`${networkId}`]\n\n      // Obtain block in which the contract was deployed\n      let initialBlock = 0\n\n      if (transactionHash) {\n        const tx = await web3.eth.getTransaction(transactionHash)\n\n        initialBlock = tx.blockNumber\n      }\n\n      return {\n        address,\n        initialBlock,\n        jsonInterface: abi,\n        networkType,\n        web3\n      }\n    }\n  }\n\n  // Contract address\n  readonly address: string\n\n  // Network in which the contract was deployed\n  readonly networkType: 'main' | 'morden' | 'ropsten' | 'rinkeby' | 'kovan' | 'private'\n\n  // Block number in which the contract was deployed\n  readonly initialBlock: number = 0\n\n  // Web3 contract instance\n  readonly contract: any\n\n  // Web3 instance\n  readonly web3: Web3\n\n  protected constructor({ web3, jsonInterface, ...options }: ContractOptions) {\n    Object.assign(this, options)\n    this.contract = new web3.eth.Contract(jsonInterface, options.address)\n    this.web3 = web3\n  }\n}\n\nexport default SmartContract\n"],"file":"SmartContract.js"}